{"version":3,"sources":["model/domain.ts","model/events.ts","data/index.ts","model/store.ts","view/card/index.tsx","view/playground/index.tsx","view/scoreScreen/index.tsx","App.tsx","index.tsx"],"names":["domain","createDomain","toggle","createEvent","resetTuple","setRemovedCard","countAttempt","resetGame","GAME_CONFIG","Object","freeze","CARDS_QUANTITY","INIT_CARDS_LIST","quantity","pairs","cardTuples","i","tuple","flat","sort","Math","random","$cardsList","createStore","$toggledTuple","cardsListExtracted","getState","$toggledTupleValues","map","state","el","$removedCards","$attempts","$gameOver","store","length","on","value","watch","setTimeout","forward","from","to","reset","removedCardStyle","transform","Card","index","isToggled","isRemoved","useStore","className","style","onClick","src","alt","Playground","cards","removedCards","useEffect","includes","scoreScreenClass","ScoreScreen","attempts","App","gameIsOver","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAGaA,EAAiBC,YAAa,gBCA9BC,EAAwBF,EAAOG,YAAY,yBAC3CC,EAAaJ,EAAOG,YAAY,oBAChCE,EAAgCL,EAAOG,YAAY,yBACnDG,EAAeN,EAAOG,YAAY,gCAClCI,EAAYP,EAAOG,YAAY,uBCP/BK,EAAcC,OAAOC,OAAO,CACvCC,eAAgB,KCOZC,EAAkB,SAACC,GAIvB,IAHA,IAAMC,EAAQD,EAAW,EACrBE,EAA8B,GAEzBC,EAAI,EAAGA,EAAIF,EAAOE,IAAK,CAC9B,IAAMC,EAAQ,CAACD,EAAGA,GAClBD,EAAU,sBAAOA,GAAP,CAAmBE,IAG/B,OAAOF,EAAWG,OAAOC,MAAK,kBAAMC,KAAKC,SAAW,OAMzCC,EAA8BtB,EAAOuB,YAAYX,EAAgBJ,EAAYG,iBAC7Ea,EAAqCxB,EAAOuB,YAJhB,IAMrCE,EAAqBH,EAAWI,WAEvBC,EAAsBH,EAAcI,KAAI,SAAAC,GAAK,OAAIA,EAAMD,KAAI,SAAAE,GAAE,OAAIL,EAAmBK,SACpFC,EAAqC/B,EAAOuB,YARhB,IAS5BS,EAA2BhC,EAAOuB,YAAY,GAC9CU,EAA4BF,EAAcH,KAAI,SAAAM,GAAK,OAAIA,EAAMC,OAAS3B,EAAYG,eAAiB,EAAI,KAEpHa,EAAcY,GAAGlC,GAAQ,SAAC2B,EAAOQ,GAAR,4BAAsBR,GAAtB,CAA6BQ,OACtDb,EAAcY,GAAGhC,GAAY,iBAAM,MAEnCkB,EAAWc,GAAG7B,GAAW,SAACsB,GAAD,OAAmBjB,EAAgBJ,EAAYG,mBAExEoB,EAAcK,GAAG/B,GAAgB,SAACwB,EAAOQ,GAAR,4BAAsBR,GAAtB,CAA6BQ,OAE9DL,EAAUI,GAAG9B,GAAc,SAAAuB,GAAK,OAAIA,EAAQ,KAE5CF,EAAoBW,OAAM,SAAAJ,GACH,IAAjBA,EAAMC,QAAgBD,EAAM,KAAOA,EAAM,IAC3CK,YAAW,WACTlC,EAAe6B,EAAM,MACpB,QAKPM,YAAQ,CAACC,KAAMrC,EAAYsC,GAAIpC,IAE/ByB,EAAcY,MAAMpC,GACpByB,EAAUW,MAAMpC,GAEhBA,EAAU+B,OAAM,WACdb,EAAqBH,EAAWI,c,uBC7C5BkB,EAAmB,CACvBC,UAAW,iBAGAC,EAAO,SAAC,GAAkE,IAAjET,EAAgE,EAAhEA,MAAOU,EAAyD,EAAzDA,MAAOC,EAAkD,EAAlDA,UAAWC,EAAuC,EAAvCA,UACvChC,EAAQiC,YAAS1B,GAEvB,OACE,qBACE2B,UAAWH,EAAY,qBAAuB,OAC9CI,MAAOH,EAAYL,EAAmB,GACtCS,QAAS,WACc,IAAjBpC,EAAMkB,QAAgBc,GAAaD,GACvC9C,EAAO6C,IALX,SAQE,qBAAKI,UAAU,YAAYG,IAAG,iBAAYjB,EAAZ,QAAyBkB,IAAI,QCrBpDC,EAAa,WACxB,IAAMC,EAAQP,YAAS5B,GACjBL,EAAQiC,YAAS1B,GACjBkC,EAAyBR,YAASnB,GAElCiB,EAAY,SAACD,GACjB,OAAIA,IAAU9B,EAAM,IAAM8B,IAAU9B,EAAM,IAY5C,OANA0C,qBAAU,WACa,IAAjB1C,EAAMkB,QACRI,YAAW,kBAAMnC,MAAc,OAEhC,CAACa,IAGF,qBAAKkC,UAAU,aAAf,SAEIM,EAAM7B,KAAI,SAACS,EAAOU,GAChB,OACE,cAAC,EAAD,CACEV,MAAOA,EACPU,MAAOA,EAEPC,UAAWA,EAAUD,GACrBE,UAAWS,EAAaE,SAASvB,IAF5BU,SC3Bfc,G,MAAmB,SAEVC,EAAc,WACzB,IAAMC,EAAWb,YAASlB,GAS1B,OAPA2B,qBAAU,WAER,OADAE,EAAmB,sBACZ,WACLA,EAAmB,WAEpB,IAGD,sBAAKV,UAAWU,EAAhB,UACE,qBAAKV,UAAU,aAAaG,IAAI,oBAAoBC,IAAI,YACxD,sBAAKJ,UAAU,eAAf,iDAAmEY,EAAnE,gBACA,wBAAQZ,UAAU,aAAaE,QAAS,kBAAM9C,KAA9C,4BCFSyD,MAdf,WACE,IAAMD,EAAWb,YAASlB,GACpBiC,EAAaf,YAASjB,GAE5B,OACE,sBAAKkB,UAAU,MAAf,UACE,oBAAIA,UAAU,aAAd,gDACGc,GAAc,sBAAKd,UAAU,eAAf,uBAAyCY,MACvDE,GAAc,cAAC,EAAD,IACfA,GAAc,cAAC,EAAD,QCVtBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d3951285.chunk.js","sourcesContent":["import { createDomain } from 'effector'\nimport type { Domain } from 'effector'\n\nexport const domain: Domain = createDomain('memory-cards')","import type { Event } from 'effector'\nimport { domain } from './domain'\n\nexport const toggle: Event<number> = domain.createEvent('card is being toggled')\nexport const resetTuple = domain.createEvent('tuple is cleared')\nexport const setRemovedCard: Event<number> = domain.createEvent('card is being removed')\nexport const countAttempt = domain.createEvent('Attempt counter is increased')\nexport const resetGame = domain.createEvent('Game has been reset')","export const GAME_CONFIG = Object.freeze({\n  CARDS_QUANTITY: 12\n})","import { forward, Store } from 'effector'\nimport { domain } from './domain'\nimport { resetTuple, toggle, setRemovedCard, countAttempt, resetGame } from './events'\nimport { GAME_CONFIG } from '../data'\n\ntype toggledTuple = number[] | []\ntype removedCards = number[] | []\n\nconst INIT_CARDS_LIST = (quantity: number) => {\n  const pairs = quantity / 2\n  let cardTuples: Array<number>[] = []\n  \n  for (let i = 0; i < pairs; i++) {\n    const tuple = [i, i]\n    cardTuples = [...cardTuples, tuple]\n  }\n\n  return cardTuples.flat().sort(() => Math.random() - 0.5)\n}\n\nconst INIT_TOGGLED_TUPLE: toggledTuple = []\nconst INIT_REMOVED_CARDS: removedCards = []\n\nexport const $cardsList: Store<number[]> = domain.createStore(INIT_CARDS_LIST(GAME_CONFIG.CARDS_QUANTITY))\nexport const $toggledTuple: Store<toggledTuple> = domain.createStore(INIT_TOGGLED_TUPLE)\n\nlet cardsListExtracted = $cardsList.getState()\n\nexport const $toggledTupleValues = $toggledTuple.map(state => state.map(el => cardsListExtracted[el]))\nexport const $removedCards: Store<removedCards> = domain.createStore(INIT_REMOVED_CARDS)\nexport const $attempts: Store<number> = domain.createStore(0)\nexport const $gameOver: Store<boolean> = $removedCards.map(store => store.length > GAME_CONFIG.CARDS_QUANTITY / 2 - 1)\n\n$toggledTuple.on(toggle, (state, value) => [...state, value])\n$toggledTuple.on(resetTuple, () => [])\n\n$cardsList.on(resetGame, (state) => state = INIT_CARDS_LIST(GAME_CONFIG.CARDS_QUANTITY))\n\n$removedCards.on(setRemovedCard, (state, value) => [...state, value])\n\n$attempts.on(countAttempt, state => state + 1)\n\n$toggledTupleValues.watch(store => {\n  if (store.length === 2 && store[0] === store[1]) {\n    setTimeout(() => {\n      setRemovedCard(store[0])\n    }, 500)\n  }\n})\n\n// resetting a pair of cards results in $attempts incrementing\nforward({from: resetTuple, to: countAttempt})\n\n$removedCards.reset(resetGame)\n$attempts.reset(resetGame)\n\nresetGame.watch(() => {\n  cardsListExtracted = $cardsList.getState()\n})","import './style.css';\nimport { toggle } from '../../model/events'\nimport { $toggledTuple } from '../../model/store'\nimport { useStore } from 'effector-react'\n\ntype cardProps = {\n  value: number,\n  index: number,\n  isToggled: boolean,\n  isRemoved: boolean,\n}\n\nconst removedCardStyle = {\n  transform: 'scale(0.0001)',\n}\n\nexport const Card = ({value, index, isToggled, isRemoved}: cardProps): JSX.Element => {\n  const tuple = useStore($toggledTuple)\n\n  return (\n    <div \n      className={isToggled ? 'card card--toggled' : 'card'} \n      style={isRemoved ? removedCardStyle : {}} \n      onClick={() => {\n        if (tuple.length === 2 || isRemoved || isToggled) return\n        toggle(index)\n      }\n    }>\n      <img className='card__img' src={`assets/${value}.svg`} alt=\"\"/>\n    </div>\n  );\n}","import './style.css';\nimport { useStore } from 'effector-react';\nimport { resetTuple } from '../../model/events'\nimport { $cardsList, $toggledTuple, $removedCards } from '../../model/store';\nimport { Card } from '../card'\nimport { useEffect } from 'react';\n\nexport const Playground = () => {\n  const cards = useStore($cardsList)\n  const tuple = useStore($toggledTuple)\n  const removedCards: number[] = useStore($removedCards)\n\n  const isToggled = (index: number) => {\n    if (index === tuple[0] || index === tuple[1]) {\n      return true\n    }\n    return false\n  }\n\n  useEffect(() => {\n    if (tuple.length === 2) {\n      setTimeout(() => resetTuple(), 1000)\n    }\n  }, [tuple])\n\n  return (\n    <div className='cards-list'>\n      {\n        cards.map((value, index) => {\n          return (\n            <Card \n              value={value} \n              index={index}\n              key={index}\n              isToggled={isToggled(index)}\n              isRemoved={removedCards.includes(value)}\n            />\n          )\n        })\n      }\n    </div>\n  )\n}","import './style.css';\nimport { $attempts } from '../../model/store'\nimport { useStore } from 'effector-react';\nimport { resetGame } from '../../model/events';\nimport { useEffect } from 'react';\n\nlet scoreScreenClass = 'score'\n\nexport const ScoreScreen = () => {\n  const attempts = useStore($attempts)\n\n  useEffect(() => {\n    scoreScreenClass = 'score score--loaded'\n    return () => {\n      scoreScreenClass = 'score'\n    }\n  }, [])\n\n  return (\n    <div className={scoreScreenClass}>\n      <img className='score__img' src='assets/trophy.svg' alt='winner!'/>\n      <div className='score__title'>Congrats! You've beaten the game in {attempts} attempts!</div>\n      <button className='score__btn' onClick={() => resetGame()}>PLAY AGAIN</button>\n    </div>\n  );\n}","import { useStore } from 'effector-react';\nimport './App.css';\nimport { $attempts, $gameOver } from './model/store';\nimport { Playground } from './view/playground'\nimport { ScoreScreen } from './view/scoreScreen'\n\nfunction App() {\n  const attempts = useStore($attempts)\n  const gameIsOver = useStore($gameOver)\n\n  return (\n    <div className=\"app\">\n      <h1 className='app__title'>React + effector memory card game</h1>\n      { !gameIsOver && <div className='app__counter'>Attempts: {attempts}</div> }\n      { !gameIsOver && <Playground /> }\n      { gameIsOver && <ScoreScreen /> }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}